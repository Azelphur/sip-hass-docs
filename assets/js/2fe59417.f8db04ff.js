"use strict";(self.webpackChunksip_hass_docs=self.webpackChunksip_hass_docs||[]).push([[4661],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=c(n),d=r,m=f["".concat(l,".").concat(d)]||f[d]||u[d]||i;return n?o.createElement(m,a(a({ref:t},p),{},{components:n})):o.createElement(m,a({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5314:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],s={tags:["TTS"],title:"Call if left open"},l=void 0,c={unversionedId:"showcase/call_if_left_open",id:"showcase/call_if_left_open",title:"Call if left open",description:"This example makes a call when you leave a window or door open, or leave lights on.",source:"@site/docs/showcase/call_if_left_open.md",sourceDirName:"showcase",slug:"/showcase/call_if_left_open",permalink:"/sip-hass-docs/docs/showcase/call_if_left_open",editUrl:"https://github.com/TECH7Fox/sip-hass-docs/edit/main/docs/showcase/call_if_left_open.md",tags:[{label:"TTS",permalink:"/sip-hass-docs/docs/tags/tts"}],version:"current",frontMatter:{tags:["TTS"],title:"Call if left open"},sidebar:"showcaseSidebar",previous:{title:"Introduction",permalink:"/sip-hass-docs/docs/showcase/introduction"}},p={},u=[],f={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This example makes a call when you leave a window or door open, or leave lights on."),(0,i.kt)("p",null,"For this to work you simply have to create a group with all window and door / lights entities in your house.\nThen, add a ",(0,i.kt)("strong",{parentName:"p"},"TSS")," extension to ",(0,i.kt)("inlineCode",{parentName:"p"},"extensions.conf")," (HassIO-Addon) / or ",(0,i.kt)("inlineCode",{parentName:"p"},"extensions_custom.conf")," (FreePBX)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-editorconfig",metastring:'title="extensions.conf"',title:'"extensions.conf"'},'[tts]                                          ; The context\nexten => 123,1,Answer()                        ; Answer the call\nexten => 123,n,agi(googletts.agi,"${TEXT}",en) ; Execute the googletts agi script with the TEXT variable\n')),(0,i.kt)("p",null,"After that, you can make service calls like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="Service: asterisk.originate"',title:'"Service:','asterisk.originate"':!0},"data:\n  channel: SIP/8002\n  context: tts\n  exten: '123'\n  priority: '1'\n  caller_id: Home Assistant\n  timeout: 60\n  variables:\n    TEXT: \"Attention. The following doors or windows are still open:  {{ dict((states|selectattr('entity_id', 'in', state_attr('group.windows_doors', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join('.......... ') }}\" \n")),(0,i.kt)("h1",{id:"full-automation-example"},"Full Automation Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="Automation"',title:'"Automation"'},"- alias: sip - call if lights still on\n  trigger:\n    platform: state\n    entity_id: group.persons\n    from: \"home\"\n    to: \"not_home\"\n    for: \"00:00:03\"\n  condition:\n    - condition: state\n      entity_id: group.windows_doors\n      state: \"on\"\n  action:\n    - service: asterisk.originate\n      data:\n        channel: SIP/8002\n        context: home-assistant-lights\n        exten: '123'\n        priority: '1'\n        caller_id: Home Assistant (Lights On)\n        timeout: 60\n        variables:\n          TEXT: \"Attention. The following lights are still on:  {{ dict((states|selectattr('entity_id', 'in', state_attr('group.lights_house', 'entity_id'))|list)|groupby('state'))['on']|map(attribute='name')|list|join(' ...... ') }}\" \n")))}d.isMDXComponent=!0}}]);